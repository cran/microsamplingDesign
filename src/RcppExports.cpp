// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// interpolate
double interpolate(std::vector<double>& xData, std::vector<double>& yData, double x);
RcppExport SEXP _microsamplingDesign_interpolate(SEXP xDataSEXP, SEXP yDataSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type xData(xDataSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yData(yDataSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolate(xData, yData, x));
    return rcpp_result_gen;
END_RCPP
}
// interpolateVec
std::vector<double> interpolateVec(std::vector<double>& xData, std::vector<double>& yData, std::vector<double>& x);
RcppExport SEXP _microsamplingDesign_interpolateVec(SEXP xDataSEXP, SEXP yDataSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type xData(xDataSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yData(yDataSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(interpolateVec(xData, yData, x));
    return rcpp_result_gen;
END_RCPP
}
// getFixedSchemePerformanceCpp
arma::colvec getFixedSchemePerformanceCpp(arma::mat popAvCurves, arma::colvec times);
RcppExport SEXP _microsamplingDesign_getFixedSchemePerformanceCpp(SEXP popAvCurvesSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type popAvCurves(popAvCurvesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(getFixedSchemePerformanceCpp(popAvCurves, times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microsamplingDesign_interpolate", (DL_FUNC) &_microsamplingDesign_interpolate, 3},
    {"_microsamplingDesign_interpolateVec", (DL_FUNC) &_microsamplingDesign_interpolateVec, 3},
    {"_microsamplingDesign_getFixedSchemePerformanceCpp", (DL_FUNC) &_microsamplingDesign_getFixedSchemePerformanceCpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_microsamplingDesign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
